/*
 * This technical data is controlled under the International Traffic in Arms Regulation (ITAR) and may not be exposed to a foreign person, either in the U.S., or abroad, without proper authorization by the U.S. Department of State.
 *
 * RESTRICTED RIGHTS
 * Contract No.: UAS and Net-Centric Resource Management Teaming IR&D
 * Contractor Name: L3HARRIS, COMCEPT DIVISION
 * Contractor Address: 1700 Science Place, Rockwall, TX 75032
 * The Government's rights to use, modify, reproduce, release, perform, display, or disclose this software are restricted by paragraph (b)(3) of the Rights in Noncommercial Computer Software and Noncommercial Computer Software Documentation clause contained in the above identified contract.  Any reproduction of computer software or portions thereof marked with this legend must also reproduce the markings.  Any person, other than the Government, who has been provided access to such software, must promptly notify the above named Contractor.
 *
 * COPYRIGHT 2018, 2020 L3 TECHNOLOGIES INC., COMCEPT DIVISION, A SUBSIDIARY OF L3HARRIS TECHNOLOGIES, INC. (L3HARRIS).  ALL RIGHTS RESERVED.
 */
package com.comcept.daedalus.api.msg;

import com.comcept.daedalus.api.team.TeamId;
import com.comcept.daedalus.msglib.DaedalusMessageType;
import com.comcept.ncct.typed.api.common.MsgType;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class DaedalusTest {

    // Catalog types
    private static final int CATALOG = 100;

    // Subtypes
    private static final Long TEAM = 1L;

    @Test
    public void checkValues() {

        assertTrue(Daedalus.PILOT_TASK_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTask_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.PILOT_TASK_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTask_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.PILOT_TASK_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTask_VALUE,
                        1L)));
        assertTrue(Daedalus.ACTIVATE_MISSION_PLAN_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.ActivateMissionPlan_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.ACTIVATE_MISSION_PLAN_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.ActivateMissionPlan_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.ACTIVATE_MISSION_PLAN_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.ActivateMissionPlan_VALUE,
                        1L)));
        assertTrue(Daedalus.ACTIVATE_MISSION_PLAN_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.ActivateMissionPlanStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.ACTIVATE_MISSION_PLAN_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.ActivateMissionPlanStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.ACTIVATE_MISSION_PLAN_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.ActivateMissionPlanStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.MISSION_PLAN_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.MissionPlanStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.MISSION_PLAN_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.MissionPlanStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.MISSION_PLAN_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.MissionPlanStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_ASSIGNMENT_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamAssignment_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_ASSIGNMENT_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamAssignment_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_ASSIGNMENT_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamAssignment_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_INVITATION_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamInvitation_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_INVITATION_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamInvitation_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_INVITATION_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamInvitation_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_INVITATION_RESPONSE_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamInvitationResponse_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_INVITATION_RESPONSE_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamInvitationResponse_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_INVITATION_RESPONSE_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamInvitationResponse_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_REGISTRATION_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamRegistration_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_REGISTRATION_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamRegistration_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_REGISTRATION_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamRegistration_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_TASK_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTask_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_TASK_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTask_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_TASK_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTask_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_TASK_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_TASK_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_TASK_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_TASK_COMMAND_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskCommand_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_TASK_COMMAND_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskCommand_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_TASK_COMMAND_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskCommand_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_TASK_COMMAND_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskCommandStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_TASK_COMMAND_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskCommandStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_TASK_COMMAND_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskCommandStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_TASK_NOTIFICATION_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskNotification_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_TASK_NOTIFICATION_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskNotification_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_TASK_NOTIFICATION_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskNotification_VALUE,
                        1L)));
        assertTrue(Daedalus.TEAM_TASK_QUEUE_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskQueue_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TEAM_TASK_QUEUE_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskQueue_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TEAM_TASK_QUEUE_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TeamTaskQueue_VALUE,
                        1L)));
        assertTrue(Daedalus.FUSION_TASK_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.FusionTask_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.FUSION_TASK_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.FusionTask_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.FUSION_TASK_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.FusionTask_VALUE,
                        1L)));
        assertTrue(Daedalus.FUSION_TASK_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.FusionTaskStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.FUSION_TASK_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.FusionTaskStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.FUSION_TASK_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.FusionTaskStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.PILOT_TASK_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.PILOT_TASK_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.PILOT_TASK_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.PILOT_TASK_COMMAND_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskCommand_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.PILOT_TASK_COMMAND_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskCommand_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.PILOT_TASK_COMMAND_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskCommand_VALUE,
                        1L)));
        assertTrue(Daedalus.PILOT_TASK_COMMAND_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskCommandStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.PILOT_TASK_COMMAND_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskCommandStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.PILOT_TASK_COMMAND_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.PilotTaskCommandStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.VEHICLE_TASK_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.VehicleTask_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.VEHICLE_TASK_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.VehicleTask_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.VEHICLE_TASK_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.VehicleTask_VALUE,
                        1L)));
        assertTrue(Daedalus.VEHICLE_TASK_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.VehicleTaskStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.VEHICLE_TASK_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.VehicleTaskStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.VEHICLE_TASK_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.VehicleTaskStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.SENSOR_TASK_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.SensorTask_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.SENSOR_TASK_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.SensorTask_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.SENSOR_TASK_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.SensorTask_VALUE,
                        1L)));
        assertTrue(Daedalus.SENSOR_TASK_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.SensorTaskStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.SENSOR_TASK_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.SensorTaskStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.SENSOR_TASK_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.SensorTaskStatus_VALUE,
                        1L)));
        assertTrue(Daedalus.TRACKER_COMMAND_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TrackerCommand_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.TRACKER_COMMAND_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TrackerCommand_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.TRACKER_COMMAND_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.TrackerCommand_VALUE,
                        1L)));
        assertTrue(Daedalus.HEALTH_AND_STATUS_LOCAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.HealthAndStatus_VALUE,
                        Daedalus.SubTypes.LOCAL)));
        assertTrue(Daedalus.HEALTH_AND_STATUS_GLOBAL.equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.HealthAndStatus_VALUE,
                        Daedalus.SubTypes.GLOBAL)));
        assertTrue(Daedalus.HEALTH_AND_STATUS_TEAM(TeamId.of(1L)).equals(
                MsgType.of(
                        CATALOG,
                        DaedalusMessageType.HealthAndStatus_VALUE,
                        1L)));

    }

}
